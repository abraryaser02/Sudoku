"""
Abrar Yaser
CS51
04/12/2022
"""

import copy
import time

"""
Without the heuristic, it took search 0.23 seconds to find the solution for problem 1, 3.45 seconds for problem
2, and 35.25 seconds for the heart problem. Whereas, with the heuristic, it took search 0.03 seconds to find the
solution for problem 1, 0.25 seconds for problem 2, and 10.45 seconds for the heart problem. This proves that
with the heuristic, which is the get_most_constrained_cell method in this instance, enables search to find the
solution at a much faster rate as it targets the cell that has the least number of candidate numbers to be added.

With the propagate method, it took search 0.0 seconds to find the solution for problem 1, 0.06 seconds to
find the solution to problem 2, and 3.39 seconds to find the solution to the heart problem. Thus, propagation
helps speed up the process of finding the next state. This is because, propagate method is always looking to see
when the domain length is 1, thus speeding up the process by a considerable amount of time.
"""

class SudokuState:
    """
    This class keeps track of the next states and allows us to find the solution to a 9 x 9 sudoku game.
    """
    def __init__(self):
        """
        This constructor initializes the instance variables.
        """
        self.size = 9  # size of the board
        self.num_placed = 0  # num of numbers placed
        self.board = []  # empty list to make the sudoku board
        self.create_board()

    def create_board(self):
        """
        this method creates a sudoku board
        :return: None
        """
        for i in range(self.size):
            row_list = []  # empty list of rows
            for j in range(self.size):
                row_list.append(SudokuEntry())  # appending lists depending on the size
            self.board.append(row_list)

    def is_goal(self):
        """
        this method tells us the goal state
        :return: a boolean
        """
        return self.num_placed == (self.size * self.size)  # checks if 81 numbers are placed here

    def remove_conflict(self, row, column, number):
        """
        This method will be called when a number has been placed in either the same row
        , column or subgrid as this entry and it will remove that number as a possibility.
        :param row: input is a row
        :param column: inout is a column
        :param number: a num that is placed
        :return: None
        """
        if not self.board[row][column].is_fixed():  # if the num is not fixed
            self.board[row][column].eliminate(number)  # eliminate the number

    def remove_all_conflicts(self, row, column, number):
        """
        this method update all the other unfilled entries that are in the same row,
        column or subgrid as this entry so that they no longer have number as an option.
        :param row: input is a row
        :param column: input is a column
        :param number: input is a num
        :return: None
        """

        for r in range(self.size):  # checks the row
            self.remove_conflict(r, column, number)

        for c in range(self.size):  # checks the column
            self.remove_conflict(row, c, number)

        subgrid_num1 = self.get_subgrid_number(row, column)
        # check if it's in the same subgrid as the input
        for r in range(self.size):
            for c in range(self.size):
                subgrid_num2 = self.get_subgrid_number(r, c)
                if subgrid_num1 == subgrid_num2:
                    self.remove_conflict(r, c, number)  # if it is, remove the number

    def add_number(self, row, column, number):
        """
        this method modifies the receiver by adding number at row, column.
        :param row: input is a row
        :param column: input is a column
        :param number: a num that is placed
        :return: None
        """

        self.board[row][column].fix(number)
        self.remove_all_conflicts(row, column, number)
        self.num_placed += 1  # updates the num of nums placed


    def get_most_constrained_cell(self):
        """
        this method acts as a heuristic as it gives us the most constrained cell
        :return: a tuple
        """

        candidates = self.size + 1  # num of candidates
        constrained_cell = None  # initializing the cell
        for r in range(self.size):
            for c in range(self.size):
                if not self.board[r][c].is_fixed() and self.board[r][c].width() < candidates:
                    candidates = self.board[r][c].width()  # size changes to the width
                    constrained_cell = (r, c)  # creating a tuple

        return constrained_cell

    def solution_is_possible(self):
        """
        this method checks if the board has at least one possible value it can take
        :return: a boolean
        """
        for r in range(self.size):
            for c in range(self.size):
                if self.board[r][c].has_conflict():  # if a conflict occurs
                    return False

        return True

    def next_states(self):
        """
        this method gives us the next states by trying to put a number in the most constrained cell
        :return: a list of the next cell
        """

        new_list = []
        row, column = self.get_most_constrained_cell()

        for num in self.board[row][column].values():
            new_state = copy.deepcopy(self)  # makes a copy of the board
            new_state.add_number(row, column, num)
            new_state.propagate()  # looking to see if the domain has become length 1
            if new_state.solution_is_possible():
                new_list.append(new_state)  # adds to the new list

        return new_list


    def get_subgrid_number(self, row, col):
        """
         Returns a number between 1 and 9 representing the subgrid
        that this row, col is in.  The top left subgrid is 1, then
        2 to the right, then 3 in the upper right, etc.
        :param row: a row
        :param col: a column
        :return: a number
        """
        row_q = int(row / 3)
        col_q = int(col / 3)
        return row_q * 3 + col_q + 1  # returns the subgrid number

    def get_any_available_cell(self):
        """
        An uninformed cell finding variant.  If you use
        this instead of find_most_constrained_cell
        the search will perform a depth first search.
        """
        for r in range(self.size):
            for c in range(self.size):
                if not self.board[r][c].is_fixed():
                    return (r, c)  # returns the available cell through a tuple
        return None

    def propagate(self):
        """
        this method works as constraint propagation
        :return:
        """
        for ri in range(self.size):
            for ci in range(self.size):
                if not self.board[ri][ci].is_fixed() and \
                   self.board[ri][ci].width() == 1:  # if there is only one candidate number
                    self.add_number(ri, ci, self.board[ri][ci].values()[0])  # then add the number
                    if self.solution_is_possible():
                        self.propagate()
                        return

    def get_raw_string(self):
        """

        :return:
        """
        board_str = ""

        for r in self.board:
            board_str += str(r) + "\n"

        return "num placed: " + str(self.num_placed) + "\n" + board_str

    def __str__(self):
        """
        prints all numbers assigned to cells.  Unassigned cells (i.e.
        those with a list of options remaining are printed as blanks
        """
        board_string = ""

        for r in range(self.size):
            if r % 3 == 0:
                board_string += " " + "-" * (self.size * 2 + 5) + "\n"

            for c in range(self.size):
                entry = self.board[r][c]

                if c % 3 == 0:
                    board_string += "| "

                board_string += str(entry) + " "

            board_string += "|\n"

        board_string += " " + "-" * (self.size * 2 + 5) + "\n"

        return "num placed: " + str(self.num_placed) + "\n" + board_string


# -----------------------------------------------------------------------
# Make all of your changes to the SudokuState class above.
# only when you're running the last experiments will
# you need to change anything below here and then only
# the different problem inputs

class SudokuEntry:
    """
    this class provides us with methods that would be called in our SudokuState class
    """
    def __init__(self):
        """
        this method is a constructor
        """
        self.fixed = False
        self.domain = list(range(1, 10))

    def is_fixed(self):
        """
        this method tells us if a number is fixed
        :return: a boolean
        """
        return self.fixed

    def width(self):
        """
        this method tells us the length of the domain
        :return: a num
        """
        return len(self.domain)

    def values(self):
        """
        this method tells us the candidate numbers
        :return: a num
        """
        return self.domain

    def has_conflict(self):
        """
        this num tells us when there are no remaining candidate nums
        :return:
        """
        return len(self.domain) == 0

    def __str__(self):
        """
        this method gives us a string representation
        :return: a string
        """
        if self.fixed:
            return str(self.domain[0])
        return "_"

    def __repr__(self):
        """
        this method tells us the first num in the domain
        :return: a string
        """
        if self.fixed:
            return str(self.domain[0])
        return str(self.domain)

    def fix(self, n):
        """
        this method fixes a num in the subgrid
        :param n: num
        :return: None
        """
        assert n in self.domain
        self.domain = [n]
        self.fixed = True

    def eliminate(self, n):
        """
        this method eliminates a num from a subgrid
        :param n: a num
        :return: None
        """
        if n in self.domain:
            assert not self.fixed
            self.domain.remove(n)

# -----------------------------------
# Even though this is the same DFS code
# that we used last time, our next_states
# function is makeing an "informed" decision
# so this algorithm performs similarly to
# best first search.


def dfs(state):
    """
    Recursive depth first search implementation

    Input:
    Takes as input a state.  The state class MUST have the following
    methods implemented:
    - is_goal(): returns True if the state is a goal state, False otherwise
    - next_states(): returns a list of the VALID states that can be
    reached from the current state

    Output:
    Returns a list of ALL states that are solutions (i.e. is_goal
    returned True) that can be reached from the input state.
    """
    # if the current state is a goal state, then return it in a list
    if state.is_goal():
        return [state]
    else:
        # make a list to accumulate the solutions in
        result = []

        for s in state.next_states():
            result += dfs(s)

        return result


